// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/type.proto

package com.google.protobuf;

/**
 * <pre>
 * A protocol buffer option, which can be attached to a message, field,
 * enumeration, etc.
 * </pre>
 *
 * Protobuf type {@code google.protobuf.Option}
 */
public  final class Option extends
        GeneratedMessageLite<
                Option, Option.Builder> implements
        // @@protoc_insertion_point(message_implements:google.protobuf.Option)
        OptionOrBuilder {
    private Option() {
        name_ = "";
    }
    public static final int NAME_FIELD_NUMBER = 1;
    private String name_;
    /**
     * <pre>
     * The option's name. For protobuf built-in options (options defined in
     * descriptor.proto), this is the short name. For example, `"map_entry"`.
     * For custom options, it should be the fully-qualified name. For example,
     * `"google.api.http"`.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The name.
     */
    @Override
    public String getName() {
        return name_;
    }
    /**
     * <pre>
     * The option's name. For protobuf built-in options (options defined in
     * descriptor.proto), this is the short name. For example, `"map_entry"`.
     * For custom options, it should be the fully-qualified name. For example,
     * `"google.api.http"`.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The bytes for name.
     */
    @Override
    public ByteString
    getNameBytes() {
        return ByteString.copyFromUtf8(name_);
    }
    /**
     * <pre>
     * The option's name. For protobuf built-in options (options defined in
     * descriptor.proto), this is the short name. For example, `"map_entry"`.
     * For custom options, it should be the fully-qualified name. For example,
     * `"google.api.http"`.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @param value The name to set.
     */
    private void setName(
            String value) {
        Class<?> valueClass = value.getClass();

        name_ = value;
    }
    /**
     * <pre>
     * The option's name. For protobuf built-in options (options defined in
     * descriptor.proto), this is the short name. For example, `"map_entry"`.
     * For custom options, it should be the fully-qualified name. For example,
     * `"google.api.http"`.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    private void clearName() {

        name_ = getDefaultInstance().getName();
    }
    /**
     * <pre>
     * The option's name. For protobuf built-in options (options defined in
     * descriptor.proto), this is the short name. For example, `"map_entry"`.
     * For custom options, it should be the fully-qualified name. For example,
     * `"google.api.http"`.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @param value The bytes for name to set.
     */
    private void setNameBytes(
            ByteString value) {
        checkByteStringIsUtf8(value);
        name_ = value.toStringUtf8();

    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private Any value_;
    /**
     * <pre>
     * The option's value packed in an Any message. If the value is a primitive,
     * the corresponding wrapper type defined in google/protobuf/wrappers.proto
     * should be used. If the value is an enum, it should be stored as an int32
     * value using the google.protobuf.Int32Value type.
     * </pre>
     *
     * <code>.google.protobuf.Any value = 2;</code>
     */
    @Override
    public boolean hasValue() {
        return value_ != null;
    }
    /**
     * <pre>
     * The option's value packed in an Any message. If the value is a primitive,
     * the corresponding wrapper type defined in google/protobuf/wrappers.proto
     * should be used. If the value is an enum, it should be stored as an int32
     * value using the google.protobuf.Int32Value type.
     * </pre>
     *
     * <code>.google.protobuf.Any value = 2;</code>
     */
    @Override
    public Any getValue() {
        return value_ == null ? Any.getDefaultInstance() : value_;
    }
    /**
     * <pre>
     * The option's value packed in an Any message. If the value is a primitive,
     * the corresponding wrapper type defined in google/protobuf/wrappers.proto
     * should be used. If the value is an enum, it should be stored as an int32
     * value using the google.protobuf.Int32Value type.
     * </pre>
     *
     * <code>.google.protobuf.Any value = 2;</code>
     */
    private void setValue(Any value) {
        value.getClass();
        value_ = value;

    }
    /**
     * <pre>
     * The option's value packed in an Any message. If the value is a primitive,
     * the corresponding wrapper type defined in google/protobuf/wrappers.proto
     * should be used. If the value is an enum, it should be stored as an int32
     * value using the google.protobuf.Int32Value type.
     * </pre>
     *
     * <code>.google.protobuf.Any value = 2;</code>
     */
    @SuppressWarnings({"ReferenceEquality"})
    private void mergeValue(Any value) {
        value.getClass();
        if (value_ != null &&
                value_ != Any.getDefaultInstance()) {
            value_ =
                    Any.newBuilder(value_).mergeFrom(value).buildPartial();
        } else {
            value_ = value;
        }

    }
    /**
     * <pre>
     * The option's value packed in an Any message. If the value is a primitive,
     * the corresponding wrapper type defined in google/protobuf/wrappers.proto
     * should be used. If the value is an enum, it should be stored as an int32
     * value using the google.protobuf.Int32Value type.
     * </pre>
     *
     * <code>.google.protobuf.Any value = 2;</code>
     */
    private void clearValue() {  value_ = null;

    }

    public static Option parseFrom(
            java.nio.ByteBuffer data)
            throws InvalidProtocolBufferException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data);
    }
    public static Option parseFrom(
            java.nio.ByteBuffer data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Option parseFrom(
            ByteString data)
            throws InvalidProtocolBufferException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data);
    }
    public static Option parseFrom(
            ByteString data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Option parseFrom(byte[] data)
            throws InvalidProtocolBufferException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data);
    }
    public static Option parseFrom(
            byte[] data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Option parseFrom(java.io.InputStream input)
            throws java.io.IOException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input);
    }
    public static Option parseFrom(
            java.io.InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static Option parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static Option parseDelimitedFrom(
            java.io.InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static Option parseFrom(
            CodedInputStream input)
            throws java.io.IOException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input);
    }
    public static Option parseFrom(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(Option prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * A protocol buffer option, which can be attached to a message, field,
     * enumeration, etc.
     * </pre>
     *
     * Protobuf type {@code google.protobuf.Option}
     */
    public static final class Builder extends
            GeneratedMessageLite.Builder<
                    Option, Builder> implements
            // @@protoc_insertion_point(builder_implements:google.protobuf.Option)
            OptionOrBuilder {
        // Construct using com.google.protobuf.Option.newBuilder()
        private Builder() {
            super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * The option's name. For protobuf built-in options (options defined in
         * descriptor.proto), this is the short name. For example, `"map_entry"`.
         * For custom options, it should be the fully-qualified name. For example,
         * `"google.api.http"`.
         * </pre>
         *
         * <code>string name = 1;</code>
         * @return The name.
         */
        @Override
        public String getName() {
            return instance.getName();
        }
        /**
         * <pre>
         * The option's name. For protobuf built-in options (options defined in
         * descriptor.proto), this is the short name. For example, `"map_entry"`.
         * For custom options, it should be the fully-qualified name. For example,
         * `"google.api.http"`.
         * </pre>
         *
         * <code>string name = 1;</code>
         * @return The bytes for name.
         */
        @Override
        public ByteString
        getNameBytes() {
            return instance.getNameBytes();
        }
        /**
         * <pre>
         * The option's name. For protobuf built-in options (options defined in
         * descriptor.proto), this is the short name. For example, `"map_entry"`.
         * For custom options, it should be the fully-qualified name. For example,
         * `"google.api.http"`.
         * </pre>
         *
         * <code>string name = 1;</code>
         * @param value The name to set.
         * @return This builder for chaining.
         */
        public Builder setName(
                String value) {
            copyOnWrite();
            instance.setName(value);
            return this;
        }
        /**
         * <pre>
         * The option's name. For protobuf built-in options (options defined in
         * descriptor.proto), this is the short name. For example, `"map_entry"`.
         * For custom options, it should be the fully-qualified name. For example,
         * `"google.api.http"`.
         * </pre>
         *
         * <code>string name = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearName() {
            copyOnWrite();
            instance.clearName();
            return this;
        }
        /**
         * <pre>
         * The option's name. For protobuf built-in options (options defined in
         * descriptor.proto), this is the short name. For example, `"map_entry"`.
         * For custom options, it should be the fully-qualified name. For example,
         * `"google.api.http"`.
         * </pre>
         *
         * <code>string name = 1;</code>
         * @param value The bytes for name to set.
         * @return This builder for chaining.
         */
        public Builder setNameBytes(
                ByteString value) {
            copyOnWrite();
            instance.setNameBytes(value);
            return this;
        }

        /**
         * <pre>
         * The option's value packed in an Any message. If the value is a primitive,
         * the corresponding wrapper type defined in google/protobuf/wrappers.proto
         * should be used. If the value is an enum, it should be stored as an int32
         * value using the google.protobuf.Int32Value type.
         * </pre>
         *
         * <code>.google.protobuf.Any value = 2;</code>
         */
        @Override
        public boolean hasValue() {
            return instance.hasValue();
        }
        /**
         * <pre>
         * The option's value packed in an Any message. If the value is a primitive,
         * the corresponding wrapper type defined in google/protobuf/wrappers.proto
         * should be used. If the value is an enum, it should be stored as an int32
         * value using the google.protobuf.Int32Value type.
         * </pre>
         *
         * <code>.google.protobuf.Any value = 2;</code>
         */
        @Override
        public Any getValue() {
            return instance.getValue();
        }
        /**
         * <pre>
         * The option's value packed in an Any message. If the value is a primitive,
         * the corresponding wrapper type defined in google/protobuf/wrappers.proto
         * should be used. If the value is an enum, it should be stored as an int32
         * value using the google.protobuf.Int32Value type.
         * </pre>
         *
         * <code>.google.protobuf.Any value = 2;</code>
         */
        public Builder setValue(Any value) {
            copyOnWrite();
            instance.setValue(value);
            return this;
        }
        /**
         * <pre>
         * The option's value packed in an Any message. If the value is a primitive,
         * the corresponding wrapper type defined in google/protobuf/wrappers.proto
         * should be used. If the value is an enum, it should be stored as an int32
         * value using the google.protobuf.Int32Value type.
         * </pre>
         *
         * <code>.google.protobuf.Any value = 2;</code>
         */
        public Builder setValue(
                Any.Builder builderForValue) {
            copyOnWrite();
            instance.setValue(builderForValue.build());
            return this;
        }
        /**
         * <pre>
         * The option's value packed in an Any message. If the value is a primitive,
         * the corresponding wrapper type defined in google/protobuf/wrappers.proto
         * should be used. If the value is an enum, it should be stored as an int32
         * value using the google.protobuf.Int32Value type.
         * </pre>
         *
         * <code>.google.protobuf.Any value = 2;</code>
         */
        public Builder mergeValue(Any value) {
            copyOnWrite();
            instance.mergeValue(value);
            return this;
        }
        /**
         * <pre>
         * The option's value packed in an Any message. If the value is a primitive,
         * the corresponding wrapper type defined in google/protobuf/wrappers.proto
         * should be used. If the value is an enum, it should be stored as an int32
         * value using the google.protobuf.Int32Value type.
         * </pre>
         *
         * <code>.google.protobuf.Any value = 2;</code>
         */
        public Builder clearValue() {  copyOnWrite();
            instance.clearValue();
            return this;
        }

        // @@protoc_insertion_point(builder_scope:google.protobuf.Option)
    }
    @Override
    @SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
            MethodToInvoke method,
            Object arg0, Object arg1) {
        switch (method) {
            case NEW_MUTABLE_INSTANCE: {
                return new Option();
            }
            case NEW_BUILDER: {
                return new Builder();
            }
            case BUILD_MESSAGE_INFO: {
                Object[] objects = new Object[] {
                        "name_",
                        "value_",
                };
                String info =
                        "\u0000\u0002\u0000\u0000\u0001\u0002\u0002\u0000\u0000\u0000\u0001\u0208\u0002\t" +
                                "";
                return newMessageInfo(DEFAULT_INSTANCE, info, objects);
            }
            // fall through
            case GET_DEFAULT_INSTANCE: {
                return DEFAULT_INSTANCE;
            }
            case GET_PARSER: {
                Parser<Option> parser = PARSER;
                if (parser == null) {
                    synchronized (Option.class) {
                        parser = PARSER;
                        if (parser == null) {
                            parser =
                                    new DefaultInstanceBasedParser<Option>(
                                            DEFAULT_INSTANCE);
                            PARSER = parser;
                        }
                    }
                }
                return parser;
            }
            case GET_MEMOIZED_IS_INITIALIZED: {
                return (byte) 1;
            }
            case SET_MEMOIZED_IS_INITIALIZED: {
                return null;
            }
        }
        throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:google.protobuf.Option)
    private static final Option DEFAULT_INSTANCE;
    static {
        Option defaultInstance = new Option();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        GeneratedMessageLite.registerDefaultInstance(
                Option.class, defaultInstance);
    }

    public static Option getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    private static volatile Parser<Option> PARSER;

    public static Parser<Option> parser() {
        return DEFAULT_INSTANCE.getParserForType();
    }
}

