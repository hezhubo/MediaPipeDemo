// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/api.proto

package com.google.protobuf;

/**
 * <pre>
 * Declares an API Interface to be included in this interface. The including
 * interface must redeclare all the methods from the included interface, but
 * documentation and options are inherited as follows:
 * - If after comment and whitespace stripping, the documentation
 *   string of the redeclared method is empty, it will be inherited
 *   from the original method.
 * - Each annotation belonging to the service config (http,
 *   visibility) which is not set in the redeclared method will be
 *   inherited.
 * - If an http annotation is inherited, the path pattern will be
 *   modified as follows. Any version prefix will be replaced by the
 *   version of the including interface plus the [root][] path if
 *   specified.
 * Example of a simple mixin:
 *     package google.acl.v1;
 *     service AccessControl {
 *       // Get the underlying ACL object.
 *       rpc GetAcl(GetAclRequest) returns (Acl) {
 *         option (google.api.http).get = "/v1/{resource=**}:getAcl";
 *       }
 *     }
 *     package google.storage.v2;
 *     service Storage {
 *       rpc GetAcl(GetAclRequest) returns (Acl);
 *       // Get a data record.
 *       rpc GetData(GetDataRequest) returns (Data) {
 *         option (google.api.http).get = "/v2/{resource=**}";
 *       }
 *     }
 * Example of a mixin configuration:
 *     apis:
 *     - name: google.storage.v2.Storage
 *       mixins:
 *       - name: google.acl.v1.AccessControl
 * The mixin construct implies that all methods in `AccessControl` are
 * also declared with same name and request/response types in
 * `Storage`. A documentation generator or annotation processor will
 * see the effective `Storage.GetAcl` method after inheriting
 * documentation and annotations as follows:
 *     service Storage {
 *       // Get the underlying ACL object.
 *       rpc GetAcl(GetAclRequest) returns (Acl) {
 *         option (google.api.http).get = "/v2/{resource=**}:getAcl";
 *       }
 *       ...
 *     }
 * Note how the version in the path pattern changed from `v1` to `v2`.
 * If the `root` field in the mixin is specified, it should be a
 * relative path under which inherited HTTP paths are placed. Example:
 *     apis:
 *     - name: google.storage.v2.Storage
 *       mixins:
 *       - name: google.acl.v1.AccessControl
 *         root: acls
 * This implies the following inherited HTTP annotation:
 *     service Storage {
 *       // Get the underlying ACL object.
 *       rpc GetAcl(GetAclRequest) returns (Acl) {
 *         option (google.api.http).get = "/v2/acls/{resource=**}:getAcl";
 *       }
 *       ...
 *     }
 * </pre>
 *
 * Protobuf type {@code google.protobuf.Mixin}
 */
public  final class Mixin extends
        GeneratedMessageLite<
                Mixin, Mixin.Builder> implements
        // @@protoc_insertion_point(message_implements:google.protobuf.Mixin)
        MixinOrBuilder {
    private Mixin() {
        name_ = "";
        root_ = "";
    }
    public static final int NAME_FIELD_NUMBER = 1;
    private String name_;
    /**
     * <pre>
     * The fully qualified name of the interface which is included.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The name.
     */
    @Override
    public String getName() {
        return name_;
    }
    /**
     * <pre>
     * The fully qualified name of the interface which is included.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The bytes for name.
     */
    @Override
    public ByteString
    getNameBytes() {
        return ByteString.copyFromUtf8(name_);
    }
    /**
     * <pre>
     * The fully qualified name of the interface which is included.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @param value The name to set.
     */
    private void setName(
            String value) {
        Class<?> valueClass = value.getClass();

        name_ = value;
    }
    /**
     * <pre>
     * The fully qualified name of the interface which is included.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    private void clearName() {

        name_ = getDefaultInstance().getName();
    }
    /**
     * <pre>
     * The fully qualified name of the interface which is included.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @param value The bytes for name to set.
     */
    private void setNameBytes(
            ByteString value) {
        checkByteStringIsUtf8(value);
        name_ = value.toStringUtf8();

    }

    public static final int ROOT_FIELD_NUMBER = 2;
    private String root_;
    /**
     * <pre>
     * If non-empty specifies a path under which inherited HTTP paths
     * are rooted.
     * </pre>
     *
     * <code>string root = 2;</code>
     * @return The root.
     */
    @Override
    public String getRoot() {
        return root_;
    }
    /**
     * <pre>
     * If non-empty specifies a path under which inherited HTTP paths
     * are rooted.
     * </pre>
     *
     * <code>string root = 2;</code>
     * @return The bytes for root.
     */
    @Override
    public ByteString
    getRootBytes() {
        return ByteString.copyFromUtf8(root_);
    }
    /**
     * <pre>
     * If non-empty specifies a path under which inherited HTTP paths
     * are rooted.
     * </pre>
     *
     * <code>string root = 2;</code>
     * @param value The root to set.
     */
    private void setRoot(
            String value) {
        Class<?> valueClass = value.getClass();

        root_ = value;
    }
    /**
     * <pre>
     * If non-empty specifies a path under which inherited HTTP paths
     * are rooted.
     * </pre>
     *
     * <code>string root = 2;</code>
     */
    private void clearRoot() {

        root_ = getDefaultInstance().getRoot();
    }
    /**
     * <pre>
     * If non-empty specifies a path under which inherited HTTP paths
     * are rooted.
     * </pre>
     *
     * <code>string root = 2;</code>
     * @param value The bytes for root to set.
     */
    private void setRootBytes(
            ByteString value) {
        checkByteStringIsUtf8(value);
        root_ = value.toStringUtf8();

    }

    public static Mixin parseFrom(
            java.nio.ByteBuffer data)
            throws InvalidProtocolBufferException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data);
    }
    public static Mixin parseFrom(
            java.nio.ByteBuffer data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Mixin parseFrom(
            ByteString data)
            throws InvalidProtocolBufferException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data);
    }
    public static Mixin parseFrom(
            ByteString data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Mixin parseFrom(byte[] data)
            throws InvalidProtocolBufferException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data);
    }
    public static Mixin parseFrom(
            byte[] data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Mixin parseFrom(java.io.InputStream input)
            throws java.io.IOException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input);
    }
    public static Mixin parseFrom(
            java.io.InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static Mixin parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static Mixin parseDelimitedFrom(
            java.io.InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static Mixin parseFrom(
            CodedInputStream input)
            throws java.io.IOException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input);
    }
    public static Mixin parseFrom(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(Mixin prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Declares an API Interface to be included in this interface. The including
     * interface must redeclare all the methods from the included interface, but
     * documentation and options are inherited as follows:
     * - If after comment and whitespace stripping, the documentation
     *   string of the redeclared method is empty, it will be inherited
     *   from the original method.
     * - Each annotation belonging to the service config (http,
     *   visibility) which is not set in the redeclared method will be
     *   inherited.
     * - If an http annotation is inherited, the path pattern will be
     *   modified as follows. Any version prefix will be replaced by the
     *   version of the including interface plus the [root][] path if
     *   specified.
     * Example of a simple mixin:
     *     package google.acl.v1;
     *     service AccessControl {
     *       // Get the underlying ACL object.
     *       rpc GetAcl(GetAclRequest) returns (Acl) {
     *         option (google.api.http).get = "/v1/{resource=**}:getAcl";
     *       }
     *     }
     *     package google.storage.v2;
     *     service Storage {
     *       rpc GetAcl(GetAclRequest) returns (Acl);
     *       // Get a data record.
     *       rpc GetData(GetDataRequest) returns (Data) {
     *         option (google.api.http).get = "/v2/{resource=**}";
     *       }
     *     }
     * Example of a mixin configuration:
     *     apis:
     *     - name: google.storage.v2.Storage
     *       mixins:
     *       - name: google.acl.v1.AccessControl
     * The mixin construct implies that all methods in `AccessControl` are
     * also declared with same name and request/response types in
     * `Storage`. A documentation generator or annotation processor will
     * see the effective `Storage.GetAcl` method after inheriting
     * documentation and annotations as follows:
     *     service Storage {
     *       // Get the underlying ACL object.
     *       rpc GetAcl(GetAclRequest) returns (Acl) {
     *         option (google.api.http).get = "/v2/{resource=**}:getAcl";
     *       }
     *       ...
     *     }
     * Note how the version in the path pattern changed from `v1` to `v2`.
     * If the `root` field in the mixin is specified, it should be a
     * relative path under which inherited HTTP paths are placed. Example:
     *     apis:
     *     - name: google.storage.v2.Storage
     *       mixins:
     *       - name: google.acl.v1.AccessControl
     *         root: acls
     * This implies the following inherited HTTP annotation:
     *     service Storage {
     *       // Get the underlying ACL object.
     *       rpc GetAcl(GetAclRequest) returns (Acl) {
     *         option (google.api.http).get = "/v2/acls/{resource=**}:getAcl";
     *       }
     *       ...
     *     }
     * </pre>
     *
     * Protobuf type {@code google.protobuf.Mixin}
     */
    public static final class Builder extends
            GeneratedMessageLite.Builder<
                    Mixin, Builder> implements
            // @@protoc_insertion_point(builder_implements:google.protobuf.Mixin)
            MixinOrBuilder {
        // Construct using com.google.protobuf.Mixin.newBuilder()
        private Builder() {
            super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * The fully qualified name of the interface which is included.
         * </pre>
         *
         * <code>string name = 1;</code>
         * @return The name.
         */
        @Override
        public String getName() {
            return instance.getName();
        }
        /**
         * <pre>
         * The fully qualified name of the interface which is included.
         * </pre>
         *
         * <code>string name = 1;</code>
         * @return The bytes for name.
         */
        @Override
        public ByteString
        getNameBytes() {
            return instance.getNameBytes();
        }
        /**
         * <pre>
         * The fully qualified name of the interface which is included.
         * </pre>
         *
         * <code>string name = 1;</code>
         * @param value The name to set.
         * @return This builder for chaining.
         */
        public Builder setName(
                String value) {
            copyOnWrite();
            instance.setName(value);
            return this;
        }
        /**
         * <pre>
         * The fully qualified name of the interface which is included.
         * </pre>
         *
         * <code>string name = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearName() {
            copyOnWrite();
            instance.clearName();
            return this;
        }
        /**
         * <pre>
         * The fully qualified name of the interface which is included.
         * </pre>
         *
         * <code>string name = 1;</code>
         * @param value The bytes for name to set.
         * @return This builder for chaining.
         */
        public Builder setNameBytes(
                ByteString value) {
            copyOnWrite();
            instance.setNameBytes(value);
            return this;
        }

        /**
         * <pre>
         * If non-empty specifies a path under which inherited HTTP paths
         * are rooted.
         * </pre>
         *
         * <code>string root = 2;</code>
         * @return The root.
         */
        @Override
        public String getRoot() {
            return instance.getRoot();
        }
        /**
         * <pre>
         * If non-empty specifies a path under which inherited HTTP paths
         * are rooted.
         * </pre>
         *
         * <code>string root = 2;</code>
         * @return The bytes for root.
         */
        @Override
        public ByteString
        getRootBytes() {
            return instance.getRootBytes();
        }
        /**
         * <pre>
         * If non-empty specifies a path under which inherited HTTP paths
         * are rooted.
         * </pre>
         *
         * <code>string root = 2;</code>
         * @param value The root to set.
         * @return This builder for chaining.
         */
        public Builder setRoot(
                String value) {
            copyOnWrite();
            instance.setRoot(value);
            return this;
        }
        /**
         * <pre>
         * If non-empty specifies a path under which inherited HTTP paths
         * are rooted.
         * </pre>
         *
         * <code>string root = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearRoot() {
            copyOnWrite();
            instance.clearRoot();
            return this;
        }
        /**
         * <pre>
         * If non-empty specifies a path under which inherited HTTP paths
         * are rooted.
         * </pre>
         *
         * <code>string root = 2;</code>
         * @param value The bytes for root to set.
         * @return This builder for chaining.
         */
        public Builder setRootBytes(
                ByteString value) {
            copyOnWrite();
            instance.setRootBytes(value);
            return this;
        }

        // @@protoc_insertion_point(builder_scope:google.protobuf.Mixin)
    }
    @Override
    @SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
            MethodToInvoke method,
            Object arg0, Object arg1) {
        switch (method) {
            case NEW_MUTABLE_INSTANCE: {
                return new Mixin();
            }
            case NEW_BUILDER: {
                return new Builder();
            }
            case BUILD_MESSAGE_INFO: {
                Object[] objects = new Object[] {
                        "name_",
                        "root_",
                };
                String info =
                        "\u0000\u0002\u0000\u0000\u0001\u0002\u0002\u0000\u0000\u0000\u0001\u0208\u0002\u0208" +
                                "";
                return newMessageInfo(DEFAULT_INSTANCE, info, objects);
            }
            // fall through
            case GET_DEFAULT_INSTANCE: {
                return DEFAULT_INSTANCE;
            }
            case GET_PARSER: {
                Parser<Mixin> parser = PARSER;
                if (parser == null) {
                    synchronized (Mixin.class) {
                        parser = PARSER;
                        if (parser == null) {
                            parser =
                                    new DefaultInstanceBasedParser<Mixin>(
                                            DEFAULT_INSTANCE);
                            PARSER = parser;
                        }
                    }
                }
                return parser;
            }
            case GET_MEMOIZED_IS_INITIALIZED: {
                return (byte) 1;
            }
            case SET_MEMOIZED_IS_INITIALIZED: {
                return null;
            }
        }
        throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:google.protobuf.Mixin)
    private static final Mixin DEFAULT_INSTANCE;
    static {
        Mixin defaultInstance = new Mixin();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        GeneratedMessageLite.registerDefaultInstance(
                Mixin.class, defaultInstance);
    }

    public static Mixin getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    private static volatile Parser<Mixin> PARSER;

    public static Parser<Mixin> parser() {
        return DEFAULT_INSTANCE.getParserForType();
    }
}

