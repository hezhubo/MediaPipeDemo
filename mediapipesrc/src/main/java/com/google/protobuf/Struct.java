// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/struct.proto

package com.google.protobuf;

/**
 * <pre>
 * `Struct` represents a structured data value, consisting of fields
 * which map to dynamically typed values. In some languages, `Struct`
 * might be supported by a native representation. For example, in
 * scripting languages like JS a struct is represented as an
 * object. The details of that representation are described together
 * with the proto support for the language.
 * The JSON representation for `Struct` is JSON object.
 * </pre>
 *
 * Protobuf type {@code google.protobuf.Struct}
 */
public  final class Struct extends
        GeneratedMessageLite<
                Struct, Struct.Builder> implements
        // @@protoc_insertion_point(message_implements:google.protobuf.Struct)
        StructOrBuilder {
    private Struct() {
    }
    public static final int FIELDS_FIELD_NUMBER = 1;
    private static final class FieldsDefaultEntryHolder {
        static final MapEntryLite<
                String, Value> defaultEntry =
                MapEntryLite
                        .<String, Value>newDefaultInstance(
                                WireFormat.FieldType.STRING,
                                "",
                                WireFormat.FieldType.MESSAGE,
                                Value.getDefaultInstance());
    }
    private MapFieldLite<
            String, Value> fields_ =
            MapFieldLite.emptyMapField();
    private MapFieldLite<String, Value>
    internalGetFields() {
        return fields_;
    }
    private MapFieldLite<String, Value>
    internalGetMutableFields() {
        if (!fields_.isMutable()) {
            fields_ = fields_.mutableCopy();
        }
        return fields_;
    }
    @Override

    public int getFieldsCount() {
        return internalGetFields().size();
    }
    /**
     * <pre>
     * Unordered map of dynamically typed values.
     * </pre>
     *
     * <code>map&lt;string, .google.protobuf.Value&gt; fields = 1;</code>
     */
    @Override

    public boolean containsFields(
            String key) {
        Class<?> keyClass = key.getClass();
        return internalGetFields().containsKey(key);
    }
    /**
     * Use {@link #getFieldsMap()} instead.
     */
    @Override
    @Deprecated
    public java.util.Map<String, Value> getFields() {
        return getFieldsMap();
    }
    /**
     * <pre>
     * Unordered map of dynamically typed values.
     * </pre>
     *
     * <code>map&lt;string, .google.protobuf.Value&gt; fields = 1;</code>
     */
    @Override

    public java.util.Map<String, Value> getFieldsMap() {
        return java.util.Collections.unmodifiableMap(
                internalGetFields());
    }
    /**
     * <pre>
     * Unordered map of dynamically typed values.
     * </pre>
     *
     * <code>map&lt;string, .google.protobuf.Value&gt; fields = 1;</code>
     */
    @Override

    public Value getFieldsOrDefault(
            String key,
            Value defaultValue) {
        Class<?> keyClass = key.getClass();
        java.util.Map<String, Value> map =
                internalGetFields();
        return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Unordered map of dynamically typed values.
     * </pre>
     *
     * <code>map&lt;string, .google.protobuf.Value&gt; fields = 1;</code>
     */
    @Override

    public Value getFieldsOrThrow(
            String key) {
        Class<?> keyClass = key.getClass();
        java.util.Map<String, Value> map =
                internalGetFields();
        if (!map.containsKey(key)) {
            throw new IllegalArgumentException();
        }
        return map.get(key);
    }
    /**
     * <pre>
     * Unordered map of dynamically typed values.
     * </pre>
     *
     * <code>map&lt;string, .google.protobuf.Value&gt; fields = 1;</code>
     */
    private java.util.Map<String, Value>
    getMutableFieldsMap() {
        return internalGetMutableFields();
    }

    public static Struct parseFrom(
            java.nio.ByteBuffer data)
            throws InvalidProtocolBufferException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data);
    }
    public static Struct parseFrom(
            java.nio.ByteBuffer data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Struct parseFrom(
            ByteString data)
            throws InvalidProtocolBufferException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data);
    }
    public static Struct parseFrom(
            ByteString data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Struct parseFrom(byte[] data)
            throws InvalidProtocolBufferException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data);
    }
    public static Struct parseFrom(
            byte[] data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Struct parseFrom(java.io.InputStream input)
            throws java.io.IOException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input);
    }
    public static Struct parseFrom(
            java.io.InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static Struct parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static Struct parseDelimitedFrom(
            java.io.InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static Struct parseFrom(
            CodedInputStream input)
            throws java.io.IOException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input);
    }
    public static Struct parseFrom(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(Struct prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * `Struct` represents a structured data value, consisting of fields
     * which map to dynamically typed values. In some languages, `Struct`
     * might be supported by a native representation. For example, in
     * scripting languages like JS a struct is represented as an
     * object. The details of that representation are described together
     * with the proto support for the language.
     * The JSON representation for `Struct` is JSON object.
     * </pre>
     *
     * Protobuf type {@code google.protobuf.Struct}
     */
    public static final class Builder extends
            GeneratedMessageLite.Builder<
                    Struct, Builder> implements
            // @@protoc_insertion_point(builder_implements:google.protobuf.Struct)
            StructOrBuilder {
        // Construct using com.google.protobuf.Struct.newBuilder()
        private Builder() {
            super(DEFAULT_INSTANCE);
        }


        @Override

        public int getFieldsCount() {
            return instance.getFieldsMap().size();
        }
        /**
         * <pre>
         * Unordered map of dynamically typed values.
         * </pre>
         *
         * <code>map&lt;string, .google.protobuf.Value&gt; fields = 1;</code>
         */
        @Override

        public boolean containsFields(
                String key) {
            Class<?> keyClass = key.getClass();
            return instance.getFieldsMap().containsKey(key);
        }

        public Builder clearFields() {
            copyOnWrite();
            instance.getMutableFieldsMap().clear();
            return this;
        }
        /**
         * <pre>
         * Unordered map of dynamically typed values.
         * </pre>
         *
         * <code>map&lt;string, .google.protobuf.Value&gt; fields = 1;</code>
         */

        public Builder removeFields(
                String key) {
            Class<?> keyClass = key.getClass();
            copyOnWrite();
            instance.getMutableFieldsMap().remove(key);
            return this;
        }
        /**
         * Use {@link #getFieldsMap()} instead.
         */
        @Override
        @Deprecated
        public java.util.Map<String, Value> getFields() {
            return getFieldsMap();
        }
        /**
         * <pre>
         * Unordered map of dynamically typed values.
         * </pre>
         *
         * <code>map&lt;string, .google.protobuf.Value&gt; fields = 1;</code>
         */
        @Override
        public java.util.Map<String, Value> getFieldsMap() {
            return java.util.Collections.unmodifiableMap(
                    instance.getFieldsMap());
        }
        /**
         * <pre>
         * Unordered map of dynamically typed values.
         * </pre>
         *
         * <code>map&lt;string, .google.protobuf.Value&gt; fields = 1;</code>
         */
        @Override

        public Value getFieldsOrDefault(
                String key,
                Value defaultValue) {
            Class<?> keyClass = key.getClass();
            java.util.Map<String, Value> map =
                    instance.getFieldsMap();
            return map.containsKey(key) ? map.get(key) : defaultValue;
        }
        /**
         * <pre>
         * Unordered map of dynamically typed values.
         * </pre>
         *
         * <code>map&lt;string, .google.protobuf.Value&gt; fields = 1;</code>
         */
        @Override

        public Value getFieldsOrThrow(
                String key) {
            Class<?> keyClass = key.getClass();
            java.util.Map<String, Value> map =
                    instance.getFieldsMap();
            if (!map.containsKey(key)) {
                throw new IllegalArgumentException();
            }
            return map.get(key);
        }
        /**
         * <pre>
         * Unordered map of dynamically typed values.
         * </pre>
         *
         * <code>map&lt;string, .google.protobuf.Value&gt; fields = 1;</code>
         */
        public Builder putFields(
                String key,
                Value value) {
            Class<?> keyClass = key.getClass();
            Class<?> valueClass = value.getClass();
            copyOnWrite();
            instance.getMutableFieldsMap().put(key, value);
            return this;
        }
        /**
         * <pre>
         * Unordered map of dynamically typed values.
         * </pre>
         *
         * <code>map&lt;string, .google.protobuf.Value&gt; fields = 1;</code>
         */
        public Builder putAllFields(
                java.util.Map<String, Value> values) {
            copyOnWrite();
            instance.getMutableFieldsMap().putAll(values);
            return this;
        }

        // @@protoc_insertion_point(builder_scope:google.protobuf.Struct)
    }
    @Override
    @SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
            MethodToInvoke method,
            Object arg0, Object arg1) {
        switch (method) {
            case NEW_MUTABLE_INSTANCE: {
                return new Struct();
            }
            case NEW_BUILDER: {
                return new Builder();
            }
            case BUILD_MESSAGE_INFO: {
                Object[] objects = new Object[] {
                        "fields_",
                        FieldsDefaultEntryHolder.defaultEntry,
                };
                String info =
                        "\u0000\u0001\u0000\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u00012";
                return newMessageInfo(DEFAULT_INSTANCE, info, objects);
            }
            // fall through
            case GET_DEFAULT_INSTANCE: {
                return DEFAULT_INSTANCE;
            }
            case GET_PARSER: {
                Parser<Struct> parser = PARSER;
                if (parser == null) {
                    synchronized (Struct.class) {
                        parser = PARSER;
                        if (parser == null) {
                            parser =
                                    new DefaultInstanceBasedParser<Struct>(
                                            DEFAULT_INSTANCE);
                            PARSER = parser;
                        }
                    }
                }
                return parser;
            }
            case GET_MEMOIZED_IS_INITIALIZED: {
                return (byte) 1;
            }
            case SET_MEMOIZED_IS_INITIALIZED: {
                return null;
            }
        }
        throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:google.protobuf.Struct)
    private static final Struct DEFAULT_INSTANCE;
    static {
        Struct defaultInstance = new Struct();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        GeneratedMessageLite.registerDefaultInstance(
                Struct.class, defaultInstance);
    }

    public static Struct getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    private static volatile Parser<Struct> PARSER;

    public static Parser<Struct> parser() {
        return DEFAULT_INSTANCE.getParserForType();
    }
}

