// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/api.proto

package com.google.protobuf;

/**
 * <pre>
 * Api is a light-weight descriptor for an API Interface.
 * Interfaces are also described as "protocol buffer services" in some contexts,
 * such as by the "service" keyword in a .proto file, but they are different
 * from API Services, which represent a concrete implementation of an interface
 * as opposed to simply a description of methods and bindings. They are also
 * sometimes simply referred to as "APIs" in other contexts, such as the name of
 * this message itself. See https://cloud.google.com/apis/design/glossary for
 * detailed terminology.
 * </pre>
 *
 * Protobuf type {@code google.protobuf.Api}
 */
public  final class Api extends
        GeneratedMessageLite<
                Api, Api.Builder> implements
        // @@protoc_insertion_point(message_implements:google.protobuf.Api)
        ApiOrBuilder {
    private Api() {
        name_ = "";
        methods_ = emptyProtobufList();
        options_ = emptyProtobufList();
        version_ = "";
        mixins_ = emptyProtobufList();
    }
    public static final int NAME_FIELD_NUMBER = 1;
    private String name_;
    /**
     * <pre>
     * The fully qualified name of this interface, including package name
     * followed by the interface's simple name.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The name.
     */
    @Override
    public String getName() {
        return name_;
    }
    /**
     * <pre>
     * The fully qualified name of this interface, including package name
     * followed by the interface's simple name.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The bytes for name.
     */
    @Override
    public ByteString
    getNameBytes() {
        return ByteString.copyFromUtf8(name_);
    }
    /**
     * <pre>
     * The fully qualified name of this interface, including package name
     * followed by the interface's simple name.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @param value The name to set.
     */
    private void setName(
            String value) {
        Class<?> valueClass = value.getClass();

        name_ = value;
    }
    /**
     * <pre>
     * The fully qualified name of this interface, including package name
     * followed by the interface's simple name.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    private void clearName() {

        name_ = getDefaultInstance().getName();
    }
    /**
     * <pre>
     * The fully qualified name of this interface, including package name
     * followed by the interface's simple name.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @param value The bytes for name to set.
     */
    private void setNameBytes(
            ByteString value) {
        checkByteStringIsUtf8(value);
        name_ = value.toStringUtf8();

    }

    public static final int METHODS_FIELD_NUMBER = 2;
    private Internal.ProtobufList<Method> methods_;
    /**
     * <pre>
     * The methods of this interface, in unspecified order.
     * </pre>
     *
     * <code>repeated .google.protobuf.Method methods = 2;</code>
     */
    @Override
    public java.util.List<Method> getMethodsList() {
        return methods_;
    }
    /**
     * <pre>
     * The methods of this interface, in unspecified order.
     * </pre>
     *
     * <code>repeated .google.protobuf.Method methods = 2;</code>
     */
    public java.util.List<? extends MethodOrBuilder>
    getMethodsOrBuilderList() {
        return methods_;
    }
    /**
     * <pre>
     * The methods of this interface, in unspecified order.
     * </pre>
     *
     * <code>repeated .google.protobuf.Method methods = 2;</code>
     */
    @Override
    public int getMethodsCount() {
        return methods_.size();
    }
    /**
     * <pre>
     * The methods of this interface, in unspecified order.
     * </pre>
     *
     * <code>repeated .google.protobuf.Method methods = 2;</code>
     */
    @Override
    public Method getMethods(int index) {
        return methods_.get(index);
    }
    /**
     * <pre>
     * The methods of this interface, in unspecified order.
     * </pre>
     *
     * <code>repeated .google.protobuf.Method methods = 2;</code>
     */
    public MethodOrBuilder getMethodsOrBuilder(
            int index) {
        return methods_.get(index);
    }
    private void ensureMethodsIsMutable() {
        Internal.ProtobufList<Method> tmp = methods_;
        if (!tmp.isModifiable()) {
            methods_ =
                    GeneratedMessageLite.mutableCopy(tmp);
        }
    }

    /**
     * <pre>
     * The methods of this interface, in unspecified order.
     * </pre>
     *
     * <code>repeated .google.protobuf.Method methods = 2;</code>
     */
    private void setMethods(
            int index, Method value) {
        value.getClass();
        ensureMethodsIsMutable();
        methods_.set(index, value);
    }
    /**
     * <pre>
     * The methods of this interface, in unspecified order.
     * </pre>
     *
     * <code>repeated .google.protobuf.Method methods = 2;</code>
     */
    private void addMethods(Method value) {
        value.getClass();
        ensureMethodsIsMutable();
        methods_.add(value);
    }
    /**
     * <pre>
     * The methods of this interface, in unspecified order.
     * </pre>
     *
     * <code>repeated .google.protobuf.Method methods = 2;</code>
     */
    private void addMethods(
            int index, Method value) {
        value.getClass();
        ensureMethodsIsMutable();
        methods_.add(index, value);
    }
    /**
     * <pre>
     * The methods of this interface, in unspecified order.
     * </pre>
     *
     * <code>repeated .google.protobuf.Method methods = 2;</code>
     */
    private void addAllMethods(
            Iterable<? extends Method> values) {
        ensureMethodsIsMutable();
        AbstractMessageLite.addAll(
                values, methods_);
    }
    /**
     * <pre>
     * The methods of this interface, in unspecified order.
     * </pre>
     *
     * <code>repeated .google.protobuf.Method methods = 2;</code>
     */
    private void clearMethods() {
        methods_ = emptyProtobufList();
    }
    /**
     * <pre>
     * The methods of this interface, in unspecified order.
     * </pre>
     *
     * <code>repeated .google.protobuf.Method methods = 2;</code>
     */
    private void removeMethods(int index) {
        ensureMethodsIsMutable();
        methods_.remove(index);
    }

    public static final int OPTIONS_FIELD_NUMBER = 3;
    private Internal.ProtobufList<Option> options_;
    /**
     * <pre>
     * Any metadata attached to the interface.
     * </pre>
     *
     * <code>repeated .google.protobuf.Option options = 3;</code>
     */
    @Override
    public java.util.List<Option> getOptionsList() {
        return options_;
    }
    /**
     * <pre>
     * Any metadata attached to the interface.
     * </pre>
     *
     * <code>repeated .google.protobuf.Option options = 3;</code>
     */
    public java.util.List<? extends OptionOrBuilder>
    getOptionsOrBuilderList() {
        return options_;
    }
    /**
     * <pre>
     * Any metadata attached to the interface.
     * </pre>
     *
     * <code>repeated .google.protobuf.Option options = 3;</code>
     */
    @Override
    public int getOptionsCount() {
        return options_.size();
    }
    /**
     * <pre>
     * Any metadata attached to the interface.
     * </pre>
     *
     * <code>repeated .google.protobuf.Option options = 3;</code>
     */
    @Override
    public Option getOptions(int index) {
        return options_.get(index);
    }
    /**
     * <pre>
     * Any metadata attached to the interface.
     * </pre>
     *
     * <code>repeated .google.protobuf.Option options = 3;</code>
     */
    public OptionOrBuilder getOptionsOrBuilder(
            int index) {
        return options_.get(index);
    }
    private void ensureOptionsIsMutable() {
        Internal.ProtobufList<Option> tmp = options_;
        if (!tmp.isModifiable()) {
            options_ =
                    GeneratedMessageLite.mutableCopy(tmp);
        }
    }

    /**
     * <pre>
     * Any metadata attached to the interface.
     * </pre>
     *
     * <code>repeated .google.protobuf.Option options = 3;</code>
     */
    private void setOptions(
            int index, Option value) {
        value.getClass();
        ensureOptionsIsMutable();
        options_.set(index, value);
    }
    /**
     * <pre>
     * Any metadata attached to the interface.
     * </pre>
     *
     * <code>repeated .google.protobuf.Option options = 3;</code>
     */
    private void addOptions(Option value) {
        value.getClass();
        ensureOptionsIsMutable();
        options_.add(value);
    }
    /**
     * <pre>
     * Any metadata attached to the interface.
     * </pre>
     *
     * <code>repeated .google.protobuf.Option options = 3;</code>
     */
    private void addOptions(
            int index, Option value) {
        value.getClass();
        ensureOptionsIsMutable();
        options_.add(index, value);
    }
    /**
     * <pre>
     * Any metadata attached to the interface.
     * </pre>
     *
     * <code>repeated .google.protobuf.Option options = 3;</code>
     */
    private void addAllOptions(
            Iterable<? extends Option> values) {
        ensureOptionsIsMutable();
        AbstractMessageLite.addAll(
                values, options_);
    }
    /**
     * <pre>
     * Any metadata attached to the interface.
     * </pre>
     *
     * <code>repeated .google.protobuf.Option options = 3;</code>
     */
    private void clearOptions() {
        options_ = emptyProtobufList();
    }
    /**
     * <pre>
     * Any metadata attached to the interface.
     * </pre>
     *
     * <code>repeated .google.protobuf.Option options = 3;</code>
     */
    private void removeOptions(int index) {
        ensureOptionsIsMutable();
        options_.remove(index);
    }

    public static final int VERSION_FIELD_NUMBER = 4;
    private String version_;
    /**
     * <pre>
     * A version string for this interface. If specified, must have the form
     * `major-version.minor-version`, as in `1.10`. If the minor version is
     * omitted, it defaults to zero. If the entire version field is empty, the
     * major version is derived from the package name, as outlined below. If the
     * field is not empty, the version in the package name will be verified to be
     * consistent with what is provided here.
     * The versioning schema uses [semantic
     * versioning](http://semver.org) where the major version number
     * indicates a breaking change and the minor version an additive,
     * non-breaking change. Both version numbers are signals to users
     * what to expect from different versions, and should be carefully
     * chosen based on the product plan.
     * The major version is also reflected in the package name of the
     * interface, which must end in `v&lt;major-version&gt;`, as in
     * `google.feature.v1`. For major versions 0 and 1, the suffix can
     * be omitted. Zero major versions must only be used for
     * experimental, non-GA interfaces.
     * </pre>
     *
     * <code>string version = 4;</code>
     * @return The version.
     */
    @Override
    public String getVersion() {
        return version_;
    }
    /**
     * <pre>
     * A version string for this interface. If specified, must have the form
     * `major-version.minor-version`, as in `1.10`. If the minor version is
     * omitted, it defaults to zero. If the entire version field is empty, the
     * major version is derived from the package name, as outlined below. If the
     * field is not empty, the version in the package name will be verified to be
     * consistent with what is provided here.
     * The versioning schema uses [semantic
     * versioning](http://semver.org) where the major version number
     * indicates a breaking change and the minor version an additive,
     * non-breaking change. Both version numbers are signals to users
     * what to expect from different versions, and should be carefully
     * chosen based on the product plan.
     * The major version is also reflected in the package name of the
     * interface, which must end in `v&lt;major-version&gt;`, as in
     * `google.feature.v1`. For major versions 0 and 1, the suffix can
     * be omitted. Zero major versions must only be used for
     * experimental, non-GA interfaces.
     * </pre>
     *
     * <code>string version = 4;</code>
     * @return The bytes for version.
     */
    @Override
    public ByteString
    getVersionBytes() {
        return ByteString.copyFromUtf8(version_);
    }
    /**
     * <pre>
     * A version string for this interface. If specified, must have the form
     * `major-version.minor-version`, as in `1.10`. If the minor version is
     * omitted, it defaults to zero. If the entire version field is empty, the
     * major version is derived from the package name, as outlined below. If the
     * field is not empty, the version in the package name will be verified to be
     * consistent with what is provided here.
     * The versioning schema uses [semantic
     * versioning](http://semver.org) where the major version number
     * indicates a breaking change and the minor version an additive,
     * non-breaking change. Both version numbers are signals to users
     * what to expect from different versions, and should be carefully
     * chosen based on the product plan.
     * The major version is also reflected in the package name of the
     * interface, which must end in `v&lt;major-version&gt;`, as in
     * `google.feature.v1`. For major versions 0 and 1, the suffix can
     * be omitted. Zero major versions must only be used for
     * experimental, non-GA interfaces.
     * </pre>
     *
     * <code>string version = 4;</code>
     * @param value The version to set.
     */
    private void setVersion(
            String value) {
        Class<?> valueClass = value.getClass();

        version_ = value;
    }
    /**
     * <pre>
     * A version string for this interface. If specified, must have the form
     * `major-version.minor-version`, as in `1.10`. If the minor version is
     * omitted, it defaults to zero. If the entire version field is empty, the
     * major version is derived from the package name, as outlined below. If the
     * field is not empty, the version in the package name will be verified to be
     * consistent with what is provided here.
     * The versioning schema uses [semantic
     * versioning](http://semver.org) where the major version number
     * indicates a breaking change and the minor version an additive,
     * non-breaking change. Both version numbers are signals to users
     * what to expect from different versions, and should be carefully
     * chosen based on the product plan.
     * The major version is also reflected in the package name of the
     * interface, which must end in `v&lt;major-version&gt;`, as in
     * `google.feature.v1`. For major versions 0 and 1, the suffix can
     * be omitted. Zero major versions must only be used for
     * experimental, non-GA interfaces.
     * </pre>
     *
     * <code>string version = 4;</code>
     */
    private void clearVersion() {

        version_ = getDefaultInstance().getVersion();
    }
    /**
     * <pre>
     * A version string for this interface. If specified, must have the form
     * `major-version.minor-version`, as in `1.10`. If the minor version is
     * omitted, it defaults to zero. If the entire version field is empty, the
     * major version is derived from the package name, as outlined below. If the
     * field is not empty, the version in the package name will be verified to be
     * consistent with what is provided here.
     * The versioning schema uses [semantic
     * versioning](http://semver.org) where the major version number
     * indicates a breaking change and the minor version an additive,
     * non-breaking change. Both version numbers are signals to users
     * what to expect from different versions, and should be carefully
     * chosen based on the product plan.
     * The major version is also reflected in the package name of the
     * interface, which must end in `v&lt;major-version&gt;`, as in
     * `google.feature.v1`. For major versions 0 and 1, the suffix can
     * be omitted. Zero major versions must only be used for
     * experimental, non-GA interfaces.
     * </pre>
     *
     * <code>string version = 4;</code>
     * @param value The bytes for version to set.
     */
    private void setVersionBytes(
            ByteString value) {
        checkByteStringIsUtf8(value);
        version_ = value.toStringUtf8();

    }

    public static final int SOURCE_CONTEXT_FIELD_NUMBER = 5;
    private SourceContext sourceContext_;
    /**
     * <pre>
     * Source context for the protocol buffer service represented by this
     * message.
     * </pre>
     *
     * <code>.google.protobuf.SourceContext source_context = 5;</code>
     */
    @Override
    public boolean hasSourceContext() {
        return sourceContext_ != null;
    }
    /**
     * <pre>
     * Source context for the protocol buffer service represented by this
     * message.
     * </pre>
     *
     * <code>.google.protobuf.SourceContext source_context = 5;</code>
     */
    @Override
    public SourceContext getSourceContext() {
        return sourceContext_ == null ? SourceContext.getDefaultInstance() : sourceContext_;
    }
    /**
     * <pre>
     * Source context for the protocol buffer service represented by this
     * message.
     * </pre>
     *
     * <code>.google.protobuf.SourceContext source_context = 5;</code>
     */
    private void setSourceContext(SourceContext value) {
        value.getClass();
        sourceContext_ = value;

    }
    /**
     * <pre>
     * Source context for the protocol buffer service represented by this
     * message.
     * </pre>
     *
     * <code>.google.protobuf.SourceContext source_context = 5;</code>
     */
    @SuppressWarnings({"ReferenceEquality"})
    private void mergeSourceContext(SourceContext value) {
        value.getClass();
        if (sourceContext_ != null &&
                sourceContext_ != SourceContext.getDefaultInstance()) {
            sourceContext_ =
                    SourceContext.newBuilder(sourceContext_).mergeFrom(value).buildPartial();
        } else {
            sourceContext_ = value;
        }

    }
    /**
     * <pre>
     * Source context for the protocol buffer service represented by this
     * message.
     * </pre>
     *
     * <code>.google.protobuf.SourceContext source_context = 5;</code>
     */
    private void clearSourceContext() {  sourceContext_ = null;

    }

    public static final int MIXINS_FIELD_NUMBER = 6;
    private Internal.ProtobufList<Mixin> mixins_;
    /**
     * <pre>
     * Included interfaces. See [Mixin][].
     * </pre>
     *
     * <code>repeated .google.protobuf.Mixin mixins = 6;</code>
     */
    @Override
    public java.util.List<Mixin> getMixinsList() {
        return mixins_;
    }
    /**
     * <pre>
     * Included interfaces. See [Mixin][].
     * </pre>
     *
     * <code>repeated .google.protobuf.Mixin mixins = 6;</code>
     */
    public java.util.List<? extends MixinOrBuilder>
    getMixinsOrBuilderList() {
        return mixins_;
    }
    /**
     * <pre>
     * Included interfaces. See [Mixin][].
     * </pre>
     *
     * <code>repeated .google.protobuf.Mixin mixins = 6;</code>
     */
    @Override
    public int getMixinsCount() {
        return mixins_.size();
    }
    /**
     * <pre>
     * Included interfaces. See [Mixin][].
     * </pre>
     *
     * <code>repeated .google.protobuf.Mixin mixins = 6;</code>
     */
    @Override
    public Mixin getMixins(int index) {
        return mixins_.get(index);
    }
    /**
     * <pre>
     * Included interfaces. See [Mixin][].
     * </pre>
     *
     * <code>repeated .google.protobuf.Mixin mixins = 6;</code>
     */
    public MixinOrBuilder getMixinsOrBuilder(
            int index) {
        return mixins_.get(index);
    }
    private void ensureMixinsIsMutable() {
        Internal.ProtobufList<Mixin> tmp = mixins_;
        if (!tmp.isModifiable()) {
            mixins_ =
                    GeneratedMessageLite.mutableCopy(tmp);
        }
    }

    /**
     * <pre>
     * Included interfaces. See [Mixin][].
     * </pre>
     *
     * <code>repeated .google.protobuf.Mixin mixins = 6;</code>
     */
    private void setMixins(
            int index, Mixin value) {
        value.getClass();
        ensureMixinsIsMutable();
        mixins_.set(index, value);
    }
    /**
     * <pre>
     * Included interfaces. See [Mixin][].
     * </pre>
     *
     * <code>repeated .google.protobuf.Mixin mixins = 6;</code>
     */
    private void addMixins(Mixin value) {
        value.getClass();
        ensureMixinsIsMutable();
        mixins_.add(value);
    }
    /**
     * <pre>
     * Included interfaces. See [Mixin][].
     * </pre>
     *
     * <code>repeated .google.protobuf.Mixin mixins = 6;</code>
     */
    private void addMixins(
            int index, Mixin value) {
        value.getClass();
        ensureMixinsIsMutable();
        mixins_.add(index, value);
    }
    /**
     * <pre>
     * Included interfaces. See [Mixin][].
     * </pre>
     *
     * <code>repeated .google.protobuf.Mixin mixins = 6;</code>
     */
    private void addAllMixins(
            Iterable<? extends Mixin> values) {
        ensureMixinsIsMutable();
        AbstractMessageLite.addAll(
                values, mixins_);
    }
    /**
     * <pre>
     * Included interfaces. See [Mixin][].
     * </pre>
     *
     * <code>repeated .google.protobuf.Mixin mixins = 6;</code>
     */
    private void clearMixins() {
        mixins_ = emptyProtobufList();
    }
    /**
     * <pre>
     * Included interfaces. See [Mixin][].
     * </pre>
     *
     * <code>repeated .google.protobuf.Mixin mixins = 6;</code>
     */
    private void removeMixins(int index) {
        ensureMixinsIsMutable();
        mixins_.remove(index);
    }

    public static final int SYNTAX_FIELD_NUMBER = 7;
    private int syntax_;
    /**
     * <pre>
     * The source syntax of the service.
     * </pre>
     *
     * <code>.google.protobuf.Syntax syntax = 7;</code>
     * @return The enum numeric value on the wire for syntax.
     */
    @Override
    public int getSyntaxValue() {
        return syntax_;
    }
    /**
     * <pre>
     * The source syntax of the service.
     * </pre>
     *
     * <code>.google.protobuf.Syntax syntax = 7;</code>
     * @return The syntax.
     */
    @Override
    public Syntax getSyntax() {
        Syntax result = Syntax.forNumber(syntax_);
        return result == null ? Syntax.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The source syntax of the service.
     * </pre>
     *
     * <code>.google.protobuf.Syntax syntax = 7;</code>
     * @param value The enum numeric value on the wire for syntax to set.
     */
    private void setSyntaxValue(int value) {
        syntax_ = value;
    }
    /**
     * <pre>
     * The source syntax of the service.
     * </pre>
     *
     * <code>.google.protobuf.Syntax syntax = 7;</code>
     * @param value The syntax to set.
     */
    private void setSyntax(Syntax value) {
        syntax_ = value.getNumber();

    }
    /**
     * <pre>
     * The source syntax of the service.
     * </pre>
     *
     * <code>.google.protobuf.Syntax syntax = 7;</code>
     */
    private void clearSyntax() {

        syntax_ = 0;
    }

    public static Api parseFrom(
            java.nio.ByteBuffer data)
            throws InvalidProtocolBufferException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data);
    }
    public static Api parseFrom(
            java.nio.ByteBuffer data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Api parseFrom(
            ByteString data)
            throws InvalidProtocolBufferException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data);
    }
    public static Api parseFrom(
            ByteString data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Api parseFrom(byte[] data)
            throws InvalidProtocolBufferException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data);
    }
    public static Api parseFrom(
            byte[] data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Api parseFrom(java.io.InputStream input)
            throws java.io.IOException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input);
    }
    public static Api parseFrom(
            java.io.InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static Api parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static Api parseDelimitedFrom(
            java.io.InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static Api parseFrom(
            CodedInputStream input)
            throws java.io.IOException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input);
    }
    public static Api parseFrom(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(Api prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Api is a light-weight descriptor for an API Interface.
     * Interfaces are also described as "protocol buffer services" in some contexts,
     * such as by the "service" keyword in a .proto file, but they are different
     * from API Services, which represent a concrete implementation of an interface
     * as opposed to simply a description of methods and bindings. They are also
     * sometimes simply referred to as "APIs" in other contexts, such as the name of
     * this message itself. See https://cloud.google.com/apis/design/glossary for
     * detailed terminology.
     * </pre>
     *
     * Protobuf type {@code google.protobuf.Api}
     */
    public static final class Builder extends
            GeneratedMessageLite.Builder<
                    Api, Builder> implements
            // @@protoc_insertion_point(builder_implements:google.protobuf.Api)
            ApiOrBuilder {
        // Construct using com.google.protobuf.Api.newBuilder()
        private Builder() {
            super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * The fully qualified name of this interface, including package name
         * followed by the interface's simple name.
         * </pre>
         *
         * <code>string name = 1;</code>
         * @return The name.
         */
        @Override
        public String getName() {
            return instance.getName();
        }
        /**
         * <pre>
         * The fully qualified name of this interface, including package name
         * followed by the interface's simple name.
         * </pre>
         *
         * <code>string name = 1;</code>
         * @return The bytes for name.
         */
        @Override
        public ByteString
        getNameBytes() {
            return instance.getNameBytes();
        }
        /**
         * <pre>
         * The fully qualified name of this interface, including package name
         * followed by the interface's simple name.
         * </pre>
         *
         * <code>string name = 1;</code>
         * @param value The name to set.
         * @return This builder for chaining.
         */
        public Builder setName(
                String value) {
            copyOnWrite();
            instance.setName(value);
            return this;
        }
        /**
         * <pre>
         * The fully qualified name of this interface, including package name
         * followed by the interface's simple name.
         * </pre>
         *
         * <code>string name = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearName() {
            copyOnWrite();
            instance.clearName();
            return this;
        }
        /**
         * <pre>
         * The fully qualified name of this interface, including package name
         * followed by the interface's simple name.
         * </pre>
         *
         * <code>string name = 1;</code>
         * @param value The bytes for name to set.
         * @return This builder for chaining.
         */
        public Builder setNameBytes(
                ByteString value) {
            copyOnWrite();
            instance.setNameBytes(value);
            return this;
        }

        /**
         * <pre>
         * The methods of this interface, in unspecified order.
         * </pre>
         *
         * <code>repeated .google.protobuf.Method methods = 2;</code>
         */
        @Override
        public java.util.List<Method> getMethodsList() {
            return java.util.Collections.unmodifiableList(
                    instance.getMethodsList());
        }
        /**
         * <pre>
         * The methods of this interface, in unspecified order.
         * </pre>
         *
         * <code>repeated .google.protobuf.Method methods = 2;</code>
         */
        @Override
        public int getMethodsCount() {
            return instance.getMethodsCount();
        }/**
         * <pre>
         * The methods of this interface, in unspecified order.
         * </pre>
         *
         * <code>repeated .google.protobuf.Method methods = 2;</code>
         */
        @Override
        public Method getMethods(int index) {
            return instance.getMethods(index);
        }
        /**
         * <pre>
         * The methods of this interface, in unspecified order.
         * </pre>
         *
         * <code>repeated .google.protobuf.Method methods = 2;</code>
         */
        public Builder setMethods(
                int index, Method value) {
            copyOnWrite();
            instance.setMethods(index, value);
            return this;
        }
        /**
         * <pre>
         * The methods of this interface, in unspecified order.
         * </pre>
         *
         * <code>repeated .google.protobuf.Method methods = 2;</code>
         */
        public Builder setMethods(
                int index, Method.Builder builderForValue) {
            copyOnWrite();
            instance.setMethods(index,
                    builderForValue.build());
            return this;
        }
        /**
         * <pre>
         * The methods of this interface, in unspecified order.
         * </pre>
         *
         * <code>repeated .google.protobuf.Method methods = 2;</code>
         */
        public Builder addMethods(Method value) {
            copyOnWrite();
            instance.addMethods(value);
            return this;
        }
        /**
         * <pre>
         * The methods of this interface, in unspecified order.
         * </pre>
         *
         * <code>repeated .google.protobuf.Method methods = 2;</code>
         */
        public Builder addMethods(
                int index, Method value) {
            copyOnWrite();
            instance.addMethods(index, value);
            return this;
        }
        /**
         * <pre>
         * The methods of this interface, in unspecified order.
         * </pre>
         *
         * <code>repeated .google.protobuf.Method methods = 2;</code>
         */
        public Builder addMethods(
                Method.Builder builderForValue) {
            copyOnWrite();
            instance.addMethods(builderForValue.build());
            return this;
        }
        /**
         * <pre>
         * The methods of this interface, in unspecified order.
         * </pre>
         *
         * <code>repeated .google.protobuf.Method methods = 2;</code>
         */
        public Builder addMethods(
                int index, Method.Builder builderForValue) {
            copyOnWrite();
            instance.addMethods(index,
                    builderForValue.build());
            return this;
        }
        /**
         * <pre>
         * The methods of this interface, in unspecified order.
         * </pre>
         *
         * <code>repeated .google.protobuf.Method methods = 2;</code>
         */
        public Builder addAllMethods(
                Iterable<? extends Method> values) {
            copyOnWrite();
            instance.addAllMethods(values);
            return this;
        }
        /**
         * <pre>
         * The methods of this interface, in unspecified order.
         * </pre>
         *
         * <code>repeated .google.protobuf.Method methods = 2;</code>
         */
        public Builder clearMethods() {
            copyOnWrite();
            instance.clearMethods();
            return this;
        }
        /**
         * <pre>
         * The methods of this interface, in unspecified order.
         * </pre>
         *
         * <code>repeated .google.protobuf.Method methods = 2;</code>
         */
        public Builder removeMethods(int index) {
            copyOnWrite();
            instance.removeMethods(index);
            return this;
        }

        /**
         * <pre>
         * Any metadata attached to the interface.
         * </pre>
         *
         * <code>repeated .google.protobuf.Option options = 3;</code>
         */
        @Override
        public java.util.List<Option> getOptionsList() {
            return java.util.Collections.unmodifiableList(
                    instance.getOptionsList());
        }
        /**
         * <pre>
         * Any metadata attached to the interface.
         * </pre>
         *
         * <code>repeated .google.protobuf.Option options = 3;</code>
         */
        @Override
        public int getOptionsCount() {
            return instance.getOptionsCount();
        }/**
         * <pre>
         * Any metadata attached to the interface.
         * </pre>
         *
         * <code>repeated .google.protobuf.Option options = 3;</code>
         */
        @Override
        public Option getOptions(int index) {
            return instance.getOptions(index);
        }
        /**
         * <pre>
         * Any metadata attached to the interface.
         * </pre>
         *
         * <code>repeated .google.protobuf.Option options = 3;</code>
         */
        public Builder setOptions(
                int index, Option value) {
            copyOnWrite();
            instance.setOptions(index, value);
            return this;
        }
        /**
         * <pre>
         * Any metadata attached to the interface.
         * </pre>
         *
         * <code>repeated .google.protobuf.Option options = 3;</code>
         */
        public Builder setOptions(
                int index, Option.Builder builderForValue) {
            copyOnWrite();
            instance.setOptions(index,
                    builderForValue.build());
            return this;
        }
        /**
         * <pre>
         * Any metadata attached to the interface.
         * </pre>
         *
         * <code>repeated .google.protobuf.Option options = 3;</code>
         */
        public Builder addOptions(Option value) {
            copyOnWrite();
            instance.addOptions(value);
            return this;
        }
        /**
         * <pre>
         * Any metadata attached to the interface.
         * </pre>
         *
         * <code>repeated .google.protobuf.Option options = 3;</code>
         */
        public Builder addOptions(
                int index, Option value) {
            copyOnWrite();
            instance.addOptions(index, value);
            return this;
        }
        /**
         * <pre>
         * Any metadata attached to the interface.
         * </pre>
         *
         * <code>repeated .google.protobuf.Option options = 3;</code>
         */
        public Builder addOptions(
                Option.Builder builderForValue) {
            copyOnWrite();
            instance.addOptions(builderForValue.build());
            return this;
        }
        /**
         * <pre>
         * Any metadata attached to the interface.
         * </pre>
         *
         * <code>repeated .google.protobuf.Option options = 3;</code>
         */
        public Builder addOptions(
                int index, Option.Builder builderForValue) {
            copyOnWrite();
            instance.addOptions(index,
                    builderForValue.build());
            return this;
        }
        /**
         * <pre>
         * Any metadata attached to the interface.
         * </pre>
         *
         * <code>repeated .google.protobuf.Option options = 3;</code>
         */
        public Builder addAllOptions(
                Iterable<? extends Option> values) {
            copyOnWrite();
            instance.addAllOptions(values);
            return this;
        }
        /**
         * <pre>
         * Any metadata attached to the interface.
         * </pre>
         *
         * <code>repeated .google.protobuf.Option options = 3;</code>
         */
        public Builder clearOptions() {
            copyOnWrite();
            instance.clearOptions();
            return this;
        }
        /**
         * <pre>
         * Any metadata attached to the interface.
         * </pre>
         *
         * <code>repeated .google.protobuf.Option options = 3;</code>
         */
        public Builder removeOptions(int index) {
            copyOnWrite();
            instance.removeOptions(index);
            return this;
        }

        /**
         * <pre>
         * A version string for this interface. If specified, must have the form
         * `major-version.minor-version`, as in `1.10`. If the minor version is
         * omitted, it defaults to zero. If the entire version field is empty, the
         * major version is derived from the package name, as outlined below. If the
         * field is not empty, the version in the package name will be verified to be
         * consistent with what is provided here.
         * The versioning schema uses [semantic
         * versioning](http://semver.org) where the major version number
         * indicates a breaking change and the minor version an additive,
         * non-breaking change. Both version numbers are signals to users
         * what to expect from different versions, and should be carefully
         * chosen based on the product plan.
         * The major version is also reflected in the package name of the
         * interface, which must end in `v&lt;major-version&gt;`, as in
         * `google.feature.v1`. For major versions 0 and 1, the suffix can
         * be omitted. Zero major versions must only be used for
         * experimental, non-GA interfaces.
         * </pre>
         *
         * <code>string version = 4;</code>
         * @return The version.
         */
        @Override
        public String getVersion() {
            return instance.getVersion();
        }
        /**
         * <pre>
         * A version string for this interface. If specified, must have the form
         * `major-version.minor-version`, as in `1.10`. If the minor version is
         * omitted, it defaults to zero. If the entire version field is empty, the
         * major version is derived from the package name, as outlined below. If the
         * field is not empty, the version in the package name will be verified to be
         * consistent with what is provided here.
         * The versioning schema uses [semantic
         * versioning](http://semver.org) where the major version number
         * indicates a breaking change and the minor version an additive,
         * non-breaking change. Both version numbers are signals to users
         * what to expect from different versions, and should be carefully
         * chosen based on the product plan.
         * The major version is also reflected in the package name of the
         * interface, which must end in `v&lt;major-version&gt;`, as in
         * `google.feature.v1`. For major versions 0 and 1, the suffix can
         * be omitted. Zero major versions must only be used for
         * experimental, non-GA interfaces.
         * </pre>
         *
         * <code>string version = 4;</code>
         * @return The bytes for version.
         */
        @Override
        public ByteString
        getVersionBytes() {
            return instance.getVersionBytes();
        }
        /**
         * <pre>
         * A version string for this interface. If specified, must have the form
         * `major-version.minor-version`, as in `1.10`. If the minor version is
         * omitted, it defaults to zero. If the entire version field is empty, the
         * major version is derived from the package name, as outlined below. If the
         * field is not empty, the version in the package name will be verified to be
         * consistent with what is provided here.
         * The versioning schema uses [semantic
         * versioning](http://semver.org) where the major version number
         * indicates a breaking change and the minor version an additive,
         * non-breaking change. Both version numbers are signals to users
         * what to expect from different versions, and should be carefully
         * chosen based on the product plan.
         * The major version is also reflected in the package name of the
         * interface, which must end in `v&lt;major-version&gt;`, as in
         * `google.feature.v1`. For major versions 0 and 1, the suffix can
         * be omitted. Zero major versions must only be used for
         * experimental, non-GA interfaces.
         * </pre>
         *
         * <code>string version = 4;</code>
         * @param value The version to set.
         * @return This builder for chaining.
         */
        public Builder setVersion(
                String value) {
            copyOnWrite();
            instance.setVersion(value);
            return this;
        }
        /**
         * <pre>
         * A version string for this interface. If specified, must have the form
         * `major-version.minor-version`, as in `1.10`. If the minor version is
         * omitted, it defaults to zero. If the entire version field is empty, the
         * major version is derived from the package name, as outlined below. If the
         * field is not empty, the version in the package name will be verified to be
         * consistent with what is provided here.
         * The versioning schema uses [semantic
         * versioning](http://semver.org) where the major version number
         * indicates a breaking change and the minor version an additive,
         * non-breaking change. Both version numbers are signals to users
         * what to expect from different versions, and should be carefully
         * chosen based on the product plan.
         * The major version is also reflected in the package name of the
         * interface, which must end in `v&lt;major-version&gt;`, as in
         * `google.feature.v1`. For major versions 0 and 1, the suffix can
         * be omitted. Zero major versions must only be used for
         * experimental, non-GA interfaces.
         * </pre>
         *
         * <code>string version = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearVersion() {
            copyOnWrite();
            instance.clearVersion();
            return this;
        }
        /**
         * <pre>
         * A version string for this interface. If specified, must have the form
         * `major-version.minor-version`, as in `1.10`. If the minor version is
         * omitted, it defaults to zero. If the entire version field is empty, the
         * major version is derived from the package name, as outlined below. If the
         * field is not empty, the version in the package name will be verified to be
         * consistent with what is provided here.
         * The versioning schema uses [semantic
         * versioning](http://semver.org) where the major version number
         * indicates a breaking change and the minor version an additive,
         * non-breaking change. Both version numbers are signals to users
         * what to expect from different versions, and should be carefully
         * chosen based on the product plan.
         * The major version is also reflected in the package name of the
         * interface, which must end in `v&lt;major-version&gt;`, as in
         * `google.feature.v1`. For major versions 0 and 1, the suffix can
         * be omitted. Zero major versions must only be used for
         * experimental, non-GA interfaces.
         * </pre>
         *
         * <code>string version = 4;</code>
         * @param value The bytes for version to set.
         * @return This builder for chaining.
         */
        public Builder setVersionBytes(
                ByteString value) {
            copyOnWrite();
            instance.setVersionBytes(value);
            return this;
        }

        /**
         * <pre>
         * Source context for the protocol buffer service represented by this
         * message.
         * </pre>
         *
         * <code>.google.protobuf.SourceContext source_context = 5;</code>
         */
        @Override
        public boolean hasSourceContext() {
            return instance.hasSourceContext();
        }
        /**
         * <pre>
         * Source context for the protocol buffer service represented by this
         * message.
         * </pre>
         *
         * <code>.google.protobuf.SourceContext source_context = 5;</code>
         */
        @Override
        public SourceContext getSourceContext() {
            return instance.getSourceContext();
        }
        /**
         * <pre>
         * Source context for the protocol buffer service represented by this
         * message.
         * </pre>
         *
         * <code>.google.protobuf.SourceContext source_context = 5;</code>
         */
        public Builder setSourceContext(SourceContext value) {
            copyOnWrite();
            instance.setSourceContext(value);
            return this;
        }
        /**
         * <pre>
         * Source context for the protocol buffer service represented by this
         * message.
         * </pre>
         *
         * <code>.google.protobuf.SourceContext source_context = 5;</code>
         */
        public Builder setSourceContext(
                SourceContext.Builder builderForValue) {
            copyOnWrite();
            instance.setSourceContext(builderForValue.build());
            return this;
        }
        /**
         * <pre>
         * Source context for the protocol buffer service represented by this
         * message.
         * </pre>
         *
         * <code>.google.protobuf.SourceContext source_context = 5;</code>
         */
        public Builder mergeSourceContext(SourceContext value) {
            copyOnWrite();
            instance.mergeSourceContext(value);
            return this;
        }
        /**
         * <pre>
         * Source context for the protocol buffer service represented by this
         * message.
         * </pre>
         *
         * <code>.google.protobuf.SourceContext source_context = 5;</code>
         */
        public Builder clearSourceContext() {  copyOnWrite();
            instance.clearSourceContext();
            return this;
        }

        /**
         * <pre>
         * Included interfaces. See [Mixin][].
         * </pre>
         *
         * <code>repeated .google.protobuf.Mixin mixins = 6;</code>
         */
        @Override
        public java.util.List<Mixin> getMixinsList() {
            return java.util.Collections.unmodifiableList(
                    instance.getMixinsList());
        }
        /**
         * <pre>
         * Included interfaces. See [Mixin][].
         * </pre>
         *
         * <code>repeated .google.protobuf.Mixin mixins = 6;</code>
         */
        @Override
        public int getMixinsCount() {
            return instance.getMixinsCount();
        }/**
         * <pre>
         * Included interfaces. See [Mixin][].
         * </pre>
         *
         * <code>repeated .google.protobuf.Mixin mixins = 6;</code>
         */
        @Override
        public Mixin getMixins(int index) {
            return instance.getMixins(index);
        }
        /**
         * <pre>
         * Included interfaces. See [Mixin][].
         * </pre>
         *
         * <code>repeated .google.protobuf.Mixin mixins = 6;</code>
         */
        public Builder setMixins(
                int index, Mixin value) {
            copyOnWrite();
            instance.setMixins(index, value);
            return this;
        }
        /**
         * <pre>
         * Included interfaces. See [Mixin][].
         * </pre>
         *
         * <code>repeated .google.protobuf.Mixin mixins = 6;</code>
         */
        public Builder setMixins(
                int index, Mixin.Builder builderForValue) {
            copyOnWrite();
            instance.setMixins(index,
                    builderForValue.build());
            return this;
        }
        /**
         * <pre>
         * Included interfaces. See [Mixin][].
         * </pre>
         *
         * <code>repeated .google.protobuf.Mixin mixins = 6;</code>
         */
        public Builder addMixins(Mixin value) {
            copyOnWrite();
            instance.addMixins(value);
            return this;
        }
        /**
         * <pre>
         * Included interfaces. See [Mixin][].
         * </pre>
         *
         * <code>repeated .google.protobuf.Mixin mixins = 6;</code>
         */
        public Builder addMixins(
                int index, Mixin value) {
            copyOnWrite();
            instance.addMixins(index, value);
            return this;
        }
        /**
         * <pre>
         * Included interfaces. See [Mixin][].
         * </pre>
         *
         * <code>repeated .google.protobuf.Mixin mixins = 6;</code>
         */
        public Builder addMixins(
                Mixin.Builder builderForValue) {
            copyOnWrite();
            instance.addMixins(builderForValue.build());
            return this;
        }
        /**
         * <pre>
         * Included interfaces. See [Mixin][].
         * </pre>
         *
         * <code>repeated .google.protobuf.Mixin mixins = 6;</code>
         */
        public Builder addMixins(
                int index, Mixin.Builder builderForValue) {
            copyOnWrite();
            instance.addMixins(index,
                    builderForValue.build());
            return this;
        }
        /**
         * <pre>
         * Included interfaces. See [Mixin][].
         * </pre>
         *
         * <code>repeated .google.protobuf.Mixin mixins = 6;</code>
         */
        public Builder addAllMixins(
                Iterable<? extends Mixin> values) {
            copyOnWrite();
            instance.addAllMixins(values);
            return this;
        }
        /**
         * <pre>
         * Included interfaces. See [Mixin][].
         * </pre>
         *
         * <code>repeated .google.protobuf.Mixin mixins = 6;</code>
         */
        public Builder clearMixins() {
            copyOnWrite();
            instance.clearMixins();
            return this;
        }
        /**
         * <pre>
         * Included interfaces. See [Mixin][].
         * </pre>
         *
         * <code>repeated .google.protobuf.Mixin mixins = 6;</code>
         */
        public Builder removeMixins(int index) {
            copyOnWrite();
            instance.removeMixins(index);
            return this;
        }

        /**
         * <pre>
         * The source syntax of the service.
         * </pre>
         *
         * <code>.google.protobuf.Syntax syntax = 7;</code>
         * @return The enum numeric value on the wire for syntax.
         */
        @Override
        public int getSyntaxValue() {
            return instance.getSyntaxValue();
        }
        /**
         * <pre>
         * The source syntax of the service.
         * </pre>
         *
         * <code>.google.protobuf.Syntax syntax = 7;</code>
         * @param value The syntax to set.
         * @return This builder for chaining.
         */
        public Builder setSyntaxValue(int value) {
            copyOnWrite();
            instance.setSyntaxValue(value);
            return this;
        }
        /**
         * <pre>
         * The source syntax of the service.
         * </pre>
         *
         * <code>.google.protobuf.Syntax syntax = 7;</code>
         * @return The syntax.
         */
        @Override
        public Syntax getSyntax() {
            return instance.getSyntax();
        }
        /**
         * <pre>
         * The source syntax of the service.
         * </pre>
         *
         * <code>.google.protobuf.Syntax syntax = 7;</code>
         * @param value The enum numeric value on the wire for syntax to set.
         * @return This builder for chaining.
         */
        public Builder setSyntax(Syntax value) {
            copyOnWrite();
            instance.setSyntax(value);
            return this;
        }
        /**
         * <pre>
         * The source syntax of the service.
         * </pre>
         *
         * <code>.google.protobuf.Syntax syntax = 7;</code>
         * @return This builder for chaining.
         */
        public Builder clearSyntax() {
            copyOnWrite();
            instance.clearSyntax();
            return this;
        }

        // @@protoc_insertion_point(builder_scope:google.protobuf.Api)
    }
    @Override
    @SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
            MethodToInvoke method,
            Object arg0, Object arg1) {
        switch (method) {
            case NEW_MUTABLE_INSTANCE: {
                return new Api();
            }
            case NEW_BUILDER: {
                return new Builder();
            }
            case BUILD_MESSAGE_INFO: {
                Object[] objects = new Object[] {
                        "name_",
                        "methods_",
                        Method.class,
                        "options_",
                        Option.class,
                        "version_",
                        "sourceContext_",
                        "mixins_",
                        Mixin.class,
                        "syntax_",
                };
                String info =
                        "\u0000\u0007\u0000\u0000\u0001\u0007\u0007\u0000\u0003\u0000\u0001\u0208\u0002\u001b" +
                                "\u0003\u001b\u0004\u0208\u0005\t\u0006\u001b\u0007\f";
                return newMessageInfo(DEFAULT_INSTANCE, info, objects);
            }
            // fall through
            case GET_DEFAULT_INSTANCE: {
                return DEFAULT_INSTANCE;
            }
            case GET_PARSER: {
                Parser<Api> parser = PARSER;
                if (parser == null) {
                    synchronized (Api.class) {
                        parser = PARSER;
                        if (parser == null) {
                            parser =
                                    new DefaultInstanceBasedParser<Api>(
                                            DEFAULT_INSTANCE);
                            PARSER = parser;
                        }
                    }
                }
                return parser;
            }
            case GET_MEMOIZED_IS_INITIALIZED: {
                return (byte) 1;
            }
            case SET_MEMOIZED_IS_INITIALIZED: {
                return null;
            }
        }
        throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:google.protobuf.Api)
    private static final Api DEFAULT_INSTANCE;
    static {
        Api defaultInstance = new Api();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        GeneratedMessageLite.registerDefaultInstance(
                Api.class, defaultInstance);
    }

    public static Api getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    private static volatile Parser<Api> PARSER;

    public static Parser<Api> parser() {
        return DEFAULT_INSTANCE.getParserForType();
    }
}

